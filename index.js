// 创建一个4*4的二维数组作为棋盘
// 里面的每一个值都是二的n次幂，其中n>=1，而且可以等于零
var gameBox = new Array();
var score = 0;
var gameOver = false;

function init() {
    // 初始化函数
    // 将数组归零

    cubeCreate(2);
    // 游戏开始：在随机两个位置生成两个方块
}


// 游戏过程：方块的滑动：
function slide() {
    // 方块滑动的函数
    // 接收用户的输入并进行方块动作，分数计算，场景刷新，新方块生成

    // 接收用户输入：
    // 向上划
    // 向下划
    // 向左划
    // 向右划

    // 向上划和向下划一类
    // 向左划和向右划一类

    // 计算场景布局
    // 方块的合并：划动后朝着滑动方向的最远端开始遍历，如果有相同的就合并
    // 方块的移动：按顺序进位
    // 实现原理：每次向某个方向划的时候 水平划就是行 垂直划就是列


    // 场景刷新
    // 给方块的滑动绑定对应的事件和动画 方块合并的动画
    boxRef();

    // 分数计算
    scoreCal();

    // 方块生成
    // 每滑动一次之后在空余 也就是值为0的区域里生成一个方块
    cubeCreate(1);

    // 判断滑动是否有有效
    // 如果滑动无效则不会生成新的方块

    // 判断游戏是否结束
    // 如何判定游戏结束：
    // 首先判断数组是否被填满
    // 其次判断生成方块后每个方块周围四格都没有和其值相同的方块
    if (1) {
        gameOver = true;
    // 游戏结束 重新开始 初始化 随便按一个键重新开始
    // 将整个游戏部分加上一层白雾 上面写 游戏结束


    // 记录本次分数 上传到排行榜 待定
    }
}

function cubeCreate(n) {
    // 生成方块的函数
    // n代表生成方块的数量 开始两个正常一个
    // 生成方块的值可能是2^1也可能是2^2

    
}

// 更新游戏面板
function boxRef() {
    
}


// 计算分数 分数是所有进行合并的方块的值的和
function scoreCal() {

}



// 程序主函数
function gameStart() {

    // 初始化棋盘
    init();

    // 每次检测到一个滑动的操作都调用一次滑动的函数


    // 先对游戏进行初始化
}

// 页面加载完成后开始游戏



// 高级功能：
// 保存每次游玩的进度
// 实现分数上传功能
// 排行榜？
// 做手机的适配
// 实现微信小程序搭载
